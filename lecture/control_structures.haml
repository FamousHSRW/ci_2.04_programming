%section
  %h1
    Control Structures

%section
  %section
    :markdown
      ## What are control structures?

      A _control structure_ is an instruction to change the next executed
      instructions, in relation to a _condition_.

  %section
    :markdown
      ## CS | Types

      - Sequential
      - Selection
      - Repetition

  %section
    :markdown
      ### CS | Logical value

      All _control structures_ use a logical value, that is mostly the
      representation of the result of an expression.

      In most languages there is a special data type called __Boolean__ that
      can represent either

      - `TRUE` for a positive evaluation
      - `FALSE` for a negative evaluation

  %section
    :markdown
      ### CS | Logical value

      Note:

      Only __C__ does not have a data type fot this.
      The representation is done with

      - `> 0` for positive evaluation
      - `<= 0` for negative evaluation

%section
  :markdown
    ## CS | Sequential

    The sequential _control structure_, is representing the default flow
    decision.
    It determines, that every instruction is executed in the order they are
    listed in the program.

%section
  %section
    :markdown
      ## CS | Selection

      A selection _control structure_ can be viewed as a branch.
      In its simplest form it contians two possible lists of instructions that
      can be executed.

  %section
    :markdown
      ### CS | Selection | IF

      The simplest selecting structure is `IF`.

      This control structure has a list of instructions, that are __only__
      executed if a _condition_ is evaluated to `TRUE`

      These list of instructions are also called _Branches_

  %section
    %h3
      CS | Selection | IF | Example

    %pre
      %code.java.hljs
        :escaped
          public class Server {
            // ... Other code left out ...

            public void handle() {
              if( this.running == true) {
                Connection con = this.accept();
                con.send(lecture.render());
                con.close();
              }
            }
          }

  %section
    :markdown
      ### CS | Selection | IF-ELSE

      This selection control structure has two branches.

      The firs branch is executed when the __condition__ evaluates to _TRUE_
      and the second branch is executed when the __condition__ evaluates to
      __FALSE__.

  %section
    %h3
      CS | Selection | IF-ELSE | Example

    %pre
      %code.java.hljs
        :escaped
          public class Server {
            // ... Other code left out ...

            public void handle(Request request)  {
              if(request.type == this.type) {
                Response response = new Response(request);

                response.addContent("This is handled.");
                request.client.send(response);

              } else {
                this.handleManager.handle(request, this);
              }
            }
          }

  %section
    :markdown
      ### CS | Selection | IF-ELSE IF-ELSE

      This variant of the selection control structure starts with an _IF_
      and then can have __one__ ore __more__ _ELSE IF__ branches.

      An _ELSE_ branch at the end is considered __best practice__ but not
      necessary.

  %section
    %h3
      CS | Selection | IF-ELSE IF-ELSE

    %pre
      %code.java.hljs
        :escaped
          public class Server {
            // ... Other code left out ...

            public void handle(Request request) {
              Response response;
              Client client = request.client;

              // ... prepare response ...

              if(request.format == "JSON") {
                response.body = JSON.format("JSON", "2.3.0", response.body)
              } else if(request.format == "YAML") {
                response.body = this.yamlFormatter.format(response.body);
              } else if(request.format == "plaintext") {
                response.body = this.htmlParser.strip(response.body);
              } else {
                response.body = this.htmlParser.tidy(response.body);
              }

              client.send(response);
            }
          }

%section
  %section
    :markdown
      ## CS | Repetition

      A repition _control structure_ can be used to let the computer _repeat_
      a list of instructions several times.

  %section
    :markdown
      ## CS | Repeat | WHILE

      This repetition structure has a list of instructions, that are executed
      __as long__ as a _condition_ is evaluated to `TRUE`
