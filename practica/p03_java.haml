%section
  %h1
    Get to know Java

%section
  %section
    :markdown
      # Pre Lab Tasks

      1. Have a running Linux Development Environment
      2. Be familiar with your chosen Text Editor
      3. Install jdk
        - ArchLinux: `$ sudo pacman -S jdk-openjdk`

  %section
    :markdown
      ## Additional Information

      - Compiler:
        - `$ javac -d build -encoding UTF-8 -g SOURCE_FILENAME`
      - Runner
        - `$ java -cp build CLASS_NAME`

  %section
    :markdown
      ## Starting Code

    %pre
      %code.java.hljs
        :escaped
          public class ... {
            public static int main() {
              ...

              return 0;
            }
          }

%section
  %section
    :markdown
      # Task A

      1. Write a program that outputs
        `Hello World!`
      2. Compile the program to Java Bytecode
      3. Use the JVM (Java Virtual Machine) to run the Java Bytecode

  %section
    :markdown
      ## Additional Information

      - [Java System](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/System.html)

%section
  %section
    :markdown
      # Task B

      1. Write a program that:
        - Asks for the name of the user
        - Greets the user with `Hello <NAME>!`
      2. Compile the program to Java Bytecode
      3. Use the JVM to run the Java Bytecode

  %section
    :markdown
      ## Additional Information

      - [java.io.Console](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Console.html)

%section
  %section
    :markdown
      # Task C

      1. Write a program that:
        - Asks for the name of the user
        - Greets the user according to time of day.
      2. Compile the program to Java Bytecode
      3. Use the JVM to run the Java Bytecode

  %section
    :markdown
      ## Additional Information

      - [java.time.LocalTime](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/LocalTime.html)

  %section
    %h3
      Starting Code

    %pre
      %code.java.hljs
        :escaped
          public class HelloTime {
            public static void main(String[] argv) {
              // ... Get the current `LocalTime`

              // Build the correct condition/conditions
              // HINT: && ||
              if(...) {
                System.out.printf("Good Morning %s!\n", name);

              } else if(... && ...) {
                System.out.printf("Good Afternoon %s!\n", name);

              } else {
                System.out.printf("Good Evening %s!\n", name);
              }
            }
          }

%section
  %section
    :markdown
      # Task D

      1. Write a program that:
        - Asks for a sentence from the user.
        - Outputs the sentence in reverse.
      2. Compile the program to Java Bytecode
      3. Use the JVM to run the Java Bytecode

  %section
    :markdown
      ## Additional Information

      - Loops:

    %pre
      %code.java.hljs
        :escaped
          while(CONDITION == TRUE) {
            ... INSTRUCTIONS ...
          }

  %section
    %h3
      AI | Loops | FOR

    %pre
      %code.java.hljs
        :escaped
          for(INIT COUNTER; CONDITION; POSTACTION) {
            ... INSTRUCTIONS ...
          }

%section
  %section
    %h1
      Task E

  %section
    :markdown
      ## Packages in Java

      A package in java is a concept to seperate a class from others.

      Makes it possible to use the same name in different contexts

    %pre
      %code.java.hljs
        :escaped
          // File: org/hsrw/ci_2_04_programming/Example.java
          package org.hsrw.ci_2_04_programming;

          public class Example {
          }

  %section
    :markdown
      ## Packages in Java 2
    %pre
      %code.java.hljs
        :escaped
          // File: org/hsrw/ci_2_04_programming/other/Example.java
          package org.hsrw.ci_2_04_programming.other;

          public class Example {
          }

  %section
    :markdown
      ## Additional Information

      - _Hint:_ Look in the `build` folder
      - _Attention:_ CLASS_NAME is not enough to run the program.
          You have to specify the new complete Name of the class.
          ex.: `org.hsrw.ci.2_04_programming.CLASS_NAME`
      - Java Documentation of `java.time` and `String`
  
  %section
    :markdown
      ## Additional Information 2

      - Package name or parts cannot start with a number:
        - ERROR: `package org.hsrw.ci.2_04_programming;`
      - Package name or parts cannot include `-`:
        - ERROR: `package org.hsrw.ci_2_04-programming;`
      - Package name or parts cannot start with `_`:
        - ERROR: `package org.hsrw.ci._2_04_programming;`

  %section
    %h3
      Start Code

    %pre
      %code.java.hljs
        :escaped
          package org.hsrw.ci_2_04_programming;

          public class ... {
            public static int main(String[] argv) {
              ...

              return 0;
            }
          }

  %section
    :markdown
      ## The Task

      1. Write a java program in a file that calculates the amount of seconds
          between two given timestamps. `09:15 11:15`
      2. Compile the program to java bytecode
      3. Use the jvm to run the java bytecode

%section
  %section
    :markdown
      # Task F

      This time we will learn to make our live easier with a _Build Script_

      A _Build Script_ allows us to define tasks that have to be done to compile
      and also run our source code.

      For Java there are several build scrips:

      - Ant
      - Maven
      - Gradle

      And also most IDEs provide tools to do this.

  %section
    :markdown
      ## Using Gradle

      Base script for java
      (You can also find a base folder in the repo in
      `practica/p03_java/task_f/gradle_base`)

  %section
    %pre
      %code.gradle.hljs
        :escaped
          plugins {
            // Activate "Java" Plugin
            // Imports predefined tasks specific for java
            id 'java'

            // Telling gradle this is an application and not a library
            id 'application'
          }

          // Needed MS Windows, to be compatible to other OS
          allprojects {
            System.setProperty("file.encoding", "UTF-8")
          }

          // Normaly reverse notation of your company/personal domain
          group "org.hsrw.ci_2_04_programming"

          version 0.1

          // Where to find dependencies for the Source Code
          repositories {
            mavenCentral()
            jcenter()
          }

          dependencies {
            // Definition of needed dependencies
          }

          // Needed for `id 'application'`
          mainClassName = "org.hsrw.ci_2_04_programming.App"

  %section
    :markdown
      ## The Task

      Answer some questions:

      1. How to use the _Gradle Build Script_?
      2. How many tasks are defined?
      3. Which task to use to compile the source code?
      4. Which task to use to run the program?

%section
  %section
    :markdown
      # Task G

      Constructor are special methods of java classes.

      They handle tasks that have to be done on instantiation.

      Constructers are Methods with the class name as method name and 
      in most cases are public.

      Constructors are called by the java virtual machine on `new ClassName()`

  %section
    :markdown
      ## Additional Information
      
      - Have a copy of the gradle_base
          `$ cp -r gradle_base task_g`

    %pre
      %code.java.hljs
        :escaped
          package org.hsrw.ci_2_04_programming

          class A {

            public A(/* ... PARAMETERS ... */) {
              // ... Class instantiation code ...
            }
          }

          A anInstance = new A(/* ... Parameters ... */);

  %section
    :markdown
      ## The Task

      1. Make a class ouf of Task C, provide a public method `greet`
      2. The constructor should store the string in an internal string attribute.
      3. In the main method of `App.java` instantiate the class 3 times with:
          - "Ford Perfect"
          - "Arthur Dent"
          - "Marvin"
      4. Use the `greet` method of each instance to get back a string and output 
          that string to console.
      3. Use gradle to compile and run the code.
